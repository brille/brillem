#!groovy

def setGitHubBuildStatus(String status, String message) {
    script {
        withCredentials([string(credentialsId: 'GitHub_API_Token',
                variable: 'api_token')]) {
            sh """
                curl -H "Authorization: token ${api_token}" \
                --request POST \
                --data '{ \
                    "state": "${status}", \
                    "description": "${message} on ${env.JOB_BASE_NAME}", \
                    "target_url": "$BUILD_URL", \
                    "context": "${env.JOB_BASE_NAME}" \
                }' \
                https://api.github.com/repos/brille/brillem/statuses/${env.GIT_COMMIT}
            """
        }
    }
}

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return sh(
            script: """
                echo "\$(\\
                    curl -s -H "Authorization: token ${api_token}" \\
                    --request GET https://api.github.com/repos/brille/brillem/commits/${env.GIT_COMMIT} |  jq '.commit.author.email' | tr -d '"'\\
                )"
            """,
            returnStdout: true
        )
    }
}

def getGitCommitAuthorEmailWindows() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return powershell(
            script: """
                [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
                \$commit_details = Invoke-RestMethod -URI "https://api.github.com/repos/brille/brillem/commits/${env.GIT_COMMIT}" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$commit_author_email = \$commit_details.commit.author.email
                echo "\$commit_author_email"
            """,
            returnStdout: true
        )
    }
}

pipeline {

    agent { label env.AGENT }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.GIT_BRANCH
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
            steps {
                script {
                    if (env.AGENT == 'sl7') {
                        setGitHubBuildStatus("pending", "Starting")
                    }
                }
            }
        }

        stage("Set up") {
            steps {
                script {
                    if (isUnix()) {
                        // Currently brille version on PyPI is too old for this... but if not can put:
                        // python -m pip install --upgrade --user pip &&
                        // python -m pip install brille
                        // just after activating the python environment
                        sh """
                            git submodule update --init
                            module load conda/3 &&
                            module load gcc &&
                            module load cmake &&
                            export CC=gcc
                            conda config --append channels free &&
                            conda create --name py python=3.6 -y &&
                            conda activate py
                            git clone https://github.com/mducle/spinw --branch brille_integration --depth 1
                            git clone https://github.com/brille/brille --depth 1 
                            cd brille && python setup.py install

                        """
                    } else {
                        bat """
                            git submodule update --init
                            CALL conda remove --name py_%MATLAB_VERSION% --all
                            CALL conda create --name py_%MATLAB_VERSION% python=3.6 -y
                            CALL conda activate py_%MATLAB_VERSION%
                            git clone https://github.com/mducle/spinw --branch brille_integration --depth 1
                            git clone https://github.com/brille/brille --depth 1 
                            cd brille && python setup.py install
                        """
                    }
                }
            }
        }

        stage("Test") {
            steps {
                script {
                    if (isUnix()) {
                        sh """
                            module load matlab/\$MATLAB_VERSION &&
                            module load conda/3 &&
                            conda activate py &&
                            cd test &&
                            matlab -nosplash -nodesktop -batch "run('run_tests.m')"
                        """
                    } else {
                        bat """
                            CALL conda activate py_%MATLAB_VERSION%
                            cd test
                            "C:\\Programming\\Matlab%MATLAB_VERSION%\\bin\\matlab.exe" -nosplash -nodesktop -wait -batch "run('run_tests.m')"
                        """
                    }
                }
            }
        }
    }

    post {

        success {
            script {
                if (env.AGENT == 'sl7') {
                    setGitHubBuildStatus("success", "Successful")
                }
                // the new .prj file's syntax seems to only work with R2019b
                if (isUnix()) {
                    if (env.MATLAB_VERSION == 'R2019b') {
                        sh """
                            module load matlab/\$MATLAB_VERSION &&
                            module load conda/3 &&
                            conda activate py &&
                            matlab -nosplash -nodesktop -batch "release('no_upload')"
                        """
                        archiveArtifacts artifacts: 'mltbx/brillem.mltbx'
                    }
                } else {
                        bat """
                            CALL conda activate py_%MATLAB_VERSION%
                            "C:\\Programming\\Matlab%MATLAB_VERSION%\\bin\\matlab.exe" -nosplash -nodesktop -wait -batch "release('no_upload')"
                        """
                        archiveArtifacts artifacts: 'mltbx/brillem.mltbx'
                }
            }
        }

        unsuccessful {
            script {
                if (env.AGENT == 'sl7') {
                    setGitHubBuildStatus("failure", "Unsuccessful")
                }
            }
            script {
	        def email
                if (isUnix()) {
                    email = getGitCommitAuthorEmail()
                } else {
                    email = getGitCommitAuthorEmailWindows()
                }
                mail (
                    to: "${email}",
                    subject: "Failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
            }
        }

        cleanup {
            deleteDir()
        }

    }
}
